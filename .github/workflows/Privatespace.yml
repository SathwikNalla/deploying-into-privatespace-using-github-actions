name: Reusable Workflow To Deploy MuleSoft Application
on:
  workflow_call:
 
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout this repo 
      uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
     # Step 2: Set up Java 17
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
 
    #   # Step 3: Set up Maven
    # - name: Set up Maven
    #   uses: actions/setup-java@v3
    #   with:
    #     maven-version: '3.8.7'
 
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    - name: Upload artifact 
      uses: actions/upload-artifact@v3
      with:
          name: artifacts
          path: target/*.jar
 
  # postman_tests:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Step 1: Check out the repository
  #     - name: Check out repository
  #       uses: actions/checkout@v3
 
  #     # Step 2: Set up Node.js
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'
 
  #     # Step 3: Install dependencies (Newman and HTML Reporter)
  #     - name: Install Newman
  #       run: npm install -g newman newman-reporter-html
 
  #     # Step 4: Run the Postman collection and generate HTML report (continue on error)
  #     - name: Run Postman Collection and Generate HTML Report
  #       continue-on-error: true  # Continue even if there are errors
  #       run: |
  #         npx newman run postman/sys-api-oauth.postman_collection.json \
  #         --environment postman/sys-api-oauth.postman_environment.json \
  #         --reporters cli,html,json \
  #         --reporter-html-export newman/newman-report.html \
  #         --reporter-json-export newman/newman-temp-report.json
 
  #    # Step 5: Calculate Test Coverage Based on Newman JSON Report
  #     - name: Calculate Test Coverage
  #       id: coverage
  #       run: |
  #         # Extract total and failed assertions using jq
  #         TOTAL_ASSERTIONS=$(jq '.run.stats.assertions.total' newman/newman-temp-report.json)
  #         FAILED_ASSERTIONS=$(jq '.run.stats.assertions.failed' newman/newman-temp-report.json)
 
  #         # Debug: Print extracted values
  #         echo "Total Assertions: $TOTAL_ASSERTIONS"
  #         echo "Failed Assertions: $FAILED_ASSERTIONS"
 
  #         # Check if values were correctly extracted
  #         if [ -z "$TOTAL_ASSERTIONS" ] || [ -z "$FAILED_ASSERTIONS" ]; then
  #           echo "Error: Failed to extract assertion stats from the Newman report."
  #           exit 1
  #         fi
 
  #         # Calculate passed assertions
  #         PASSED_ASSERTIONS=$(($TOTAL_ASSERTIONS - $FAILED_ASSERTIONS))
 
  #         # Debug: Print passed assertion count
  #         echo "Passed Assertions: $PASSED_ASSERTIONS"
 
  #         # Calculate coverage percentage
  #         COVERAGE=$(echo "scale=2; ($PASSED_ASSERTIONS / $TOTAL_ASSERTIONS) * 100" | bc)
 
  #         # Fail the workflow if coverage is less than 80%
  #         if (( $(echo "$COVERAGE < 80" | bc -l) )); then
  #           echo "Test coverage is below 80% ($COVERAGE%)"
  #           exit 1
  #         else
  #           echo "Test coverage is above 80% ($COVERAGE%)"
  #           echo "Total Assertions: $TOTAL_ASSERTIONS"
  #           echo "Passed Assertions: $PASSED_ASSERTIONS"
  #           echo "Coverage: $COVERAGE%"
  #         fi
 
  #     # Step 6: Upload HTML Report as an Artifact
  #     - name: Upload HTML Report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: newman-html-report
  #         path: newman/newman-report.html
  #     # Step 7: Upload JSON Report as an Artifact
  #     - name: Upload JSON Report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: newman-json-report
  #         path: newman/newman-temp-report.json
 
  #     # Step 8: Deploy Only if Coverage is Greater Than 80%
  #     - name: Deploy Application
  #       if: success()  # Proceed only if the coverage is above 80%
  #       run: |
  #         echo "Deploying application to dev"

 
  deploydev:
    needs: build
    runs-on: ubuntu-latest
 
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
 
    - name: Install jq (for JSON parsing)
      run: sudo apt-get install -y jq
 
    - name: Authenticate with Anypoint Platform using Username and Password
      run: |
        echo "Authenticating with Anypoint Platform..."
        curl -X POST https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
        -H "Content-Type: application/json" \
        -d '{
          "grant_type": "password",
          "username": "'"${{ secrets.ANYPOINT_USERNAME }}"'",
          "password": "'"${{ secrets.ANYPOINT_PASSWORD }}"'"
        }' -o auth.json
    - name: Deploy to CloudHub 2.0 Private Space
      env:
         USERNAME: ${{ secrets.CONNECTED_APP_CLIENT_ID }}
         PASSWORD: ${{ secrets.CONNECTED_APP_CLIENT_SECRET }}
#        KEY: ${{ secrets.key }}
         API_ID: ${{ secrets.dev_api_id }}
         PRIVATE_SPACE_ID: ${{ secrets.PRIVATE_SPACE_ID }}
      run: |
         artifactName=$(ls *.jar | head -1)
         mvn deploy -DmuleDeploy \
          -Dmule.artifact=$artifactName \
          -Danypoint.username="$USERNAME" \
          -Danypoint.password="$PASSWORD" \
          -Ddecryption.key="$KEY" \
          -Dmule.env=dev \
          -Denv=dev \
          -Dappname=algolia-app-dev \
          -Danypoint.platform.client_id="$PLATFORM_CLIENT_ID" \
          -Danypoint.platform.client_secret="$PLATFORM_CLIENT_SECRET" \
          -Danypoint.platform.private_space_id="$PRIVATE_SPACE_ID"
